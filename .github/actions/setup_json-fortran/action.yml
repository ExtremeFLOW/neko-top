name: Setup the JSON-Fortran library
description: |
  This action sets up the JSON-Fortran library for use in the main workflow.

inputs:
  install-dir:
    description: 'The directory to install the JSON-Fortran library.'
    required: false
    default: '/home/runner/pkg/json-fortran'
  working-dir:
    description: 'The directory to work in.'
    required: false
    default: '/home/runner/tmp/json-fortran'
  os:
    description: 'The operating system to use.'
    required: false
    default: '${{ runner.os }}'
  compiler:
    description: 'The compiler to use.'
    required: false
    default: 'gfortran'
  compiler-flags:
    description: 'The compiler flag to use.'
    required: false
    default: '-O3'
  build-options:
    description: 'The build option to use.'
    required: false
    default: '--parallel $(nproc)'

runs:
  using: composite
  steps:
    - name: Cache json-fortran
      id: cache-json-fortran
      uses: actions/cache@v3
      with:
        path: ${{ inputs.install-dir }}
        key: json-fortran-${{ inputs.os }}-${{ inputs.compiler }}

    - name: Cache found
      if: ${{ steps.cache-json-fortran.outputs.cache-hit == 'true' }}
      shell: bash
      run: exit 0

    - name: Create working directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.working-dir }}

    - name: Clone json-fortran
      env:
        WORKING_DIR: ${{ inputs.working-dir }}
      shell: bash
      run: |
        git clone https://github.com/jacobwilliams/json-fortran.git $WORKING_DIR

    - name: Configure json-fortran
      env:
        INSTALL_DIR: ${{ inputs.install-dir }}
        WORKING_DIR: ${{ inputs.working-dir }}
        FC: ${{ inputs.compiler }}
        FCFLAGS: ${{ inputs.compiler-flags }}
      shell: bash
      run: |
        cmake -B $WORKING_DIR/build -S $WORKING_DIR \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
          -DUSE_GNU_INSTALL_CONVENTION=ON \
          -DSKIP_DOC_GEN=ON

    - name: Install json-fortran
      env:
        WORKING_DIR: ${{ inputs.working-dir }}
        FC: ${{ inputs.compiler }}
        FCFLAGS: ${{ inputs.compiler-flags }}
      shell: bash
      run: |
        cmake --build $WORKING_DIR/build --config Release ${{ inputs.build-options }}
        cmake --install $WORKING_DIR/build

    - name: Cleanup
      shell: bash
      run: |
        if [ ${{ inputs.install-dir }} != ${{ inputs.working-dir }} ]; then
          rm -rf ${{ inputs.working-dir }}
        fi

