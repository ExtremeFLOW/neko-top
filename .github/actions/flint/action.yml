name: Execution of Flint
description: |
  This action executes the Flint linter on the specified directory.

inputs:
  path:
    description: "The directory to lint."
    required: true
    default: "."

  depth:
    description: "The depth to lint."
    required: false
    default: "10"

  rc-file:
    description: "The configuration file to use."
    required: false
    default: "flinter_rc.yml"

outputs:
  score:
    description: "The score of the repository linted."
    value: ${{ steps.score-repository.outputs.score }}

runs:
  using: composite
  steps:
    - name: Setup environment
      shell: bash
      run: |
        sudo apt-get update -yq
        sudo apt-get install -yq bc python3-dev python3-pip python3-tk

    - name: Setup the python environment
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        cache: "pip"
        cache-dependency-path: "**/requirements-flint.txt"

    - name: Install the linter
      shell: bash
      run: pip install -r ${{ github.action_path }}/requirements-flint.txt

    - name: Score the repository
      shell: bash
      id: score-repository
      run: |
        # If more than one directory is specified, then loop through them.
        score=0
        num=0
        for entry in ${{ inputs.path }}; do
          if [ -d "$entry" ]; then
            echo "Scoring $entry"
            flint score $entry -d ${{ inputs.depth }} -r ${{ inputs.rc-file }} | tee flint.txt

            # Extract the score from the flint.txt file.
            s=$(awk '$1==0{print $3}' flint.txt)

            # Update the running score.
            score=$(echo "$score + $s" | bc)
            num=$((num + 1))
          fi
        done

        if [ $num -eq 0 ]; then
          echo "No directories found to score."
        else
          # Calculate the average score.
          score=$(echo "scale=2; $score / $num" | bc)

          if [ -z "$score" ]; then
            echo "No score found, check flint.txt"
            exit 1
          fi

          echo "Score=$score"
          echo "score=$score" >> $GITHUB_OUTPUT
        fi

    - name: Lint the files
      shell: bash
      id: lint-files
      run: |
        touch flint-report.txt
        # If more than one directory is specified, then loop through them.
        for entry in ${{ inputs.path }}; do
          if [ -f "$entry" ]; then
              # Skip non-fortran files
              if [[ ${entry: -4} != ".f90" && ${entry: -4} != ".F90" ]]; then
                continue
              fi

              rm -f flint.txt
              flint lint -r ${{ inputs.rc-file }} $entry > flint.txt
              if [ ! -s flint.txt ]; then
                flint stats -r ${{ inputs.rc-file }} $entry > flint.txt
              fi

              printf "%.s-" {1..80} && printf "\n"
              printf "Linting improvements for \n\t$entry\n\n"
              cat flint.txt | tee -a flint-report.txt
          fi
        done
