name: Linting

# Controls when the action will run.
on:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - ci/*

jobs:
  score-develop:
    name: "Score develop branch"
    runs-on: ubuntu-20.04
    outputs:
      score: ${{ steps.save-score.outputs.score }}

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: develop

      - name: Run flint
        id: lint
        uses: ./.github/actions/flint
        with:
          path: sources/
          depth: 10
          rc-file: flinter_rc.yml

      - name: Save the score
        id: save-score
        run: |
          echo "Develop score=${{ steps.lint.outputs.score }}"
          echo "score=${{ steps.lint.outputs.score }}" >> $GITHUB_OUTPUT

  score-current:
    name: "Score current branch"
    runs-on: ubuntu-20.04
    outputs:
      score: ${{ steps.save-score.outputs.score }}

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Lint repository
        id: lint
        uses: ./.github/actions/flint
        with:
          path: sources/ examples/ tests/
          depth: 10
          rc-file: flinter_rc.yml

      - name: Save the score
        id: save-score
        run: |
          echo "Current score=${{ steps.lint.outputs.score }}"
          echo "score=${{ steps.lint.outputs.score }}" >> $GITHUB_OUTPUT

  check-scores:
    name: "Check scores"
    runs-on: ubuntu-20.04
    needs:
      - score-develop
      - score-current

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4

      # Check if the current branch has a lower score than the develop branch.
      # If the score is lower, the linting has failed and we require improvements.
      - name: Check the scores
        id: check-score
        env:
          develop_score: ${{ needs.score-develop.outputs.score }}
          current_score: ${{ needs.score-current.outputs.score }}
        run: |
          if [ -z "$develop_score" ]; then
            echo "Develop score not set: '$develop_score'" >&2
            exit 1
          fi
          if [ -z "$current_score" ]; then
            echo "Current score not set: '$current_score'" >&2
            exit 1
          fi

          # Check if any changes have been made to the Fortran files.
          git fetch --unshallow origin develop
          changes=($(git diff --name-only --diff-filter=d origin/develop))
          fortran_changed=false
          for file in ${changes[@]}; do
            if [[ ${file: -4} == ".f90" || ${file: -4} == ".F90" ]]; then
              fortran_changed=true
            fi
          done

          if [ "$fortran_changed" == "false" ]; then
            echo "No changes detected in Fortran files."
            exit 0
          fi

          if (($(echo "$current_score < $develop_score" | bc -l))); then
            echo "Linting failed, the score is lower than the develop branch."
            echo "Please improve linting by applying suggestions."
            exit 2
          fi


  # Run the flint linter on the changed fortran files and provide suggestions
  # for improvements. The suggestions are saved in a linter-report.txt file.
  lint-changes:
    name: "Lint changes"
    runs-on: ubuntu-20.04
    needs:
      - score-current
      - score-develop

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq bc python3-dev python3-pip python3-tk
          pip install flinter nobvisual

        # Get a list of the changed files and store them for later use.
      - name: Get changed files
        id: get-changed-files
        run: |
          git fetch --unshallow origin develop
          changes=($(git diff --name-only --diff-filter=d origin/develop))

          printf "Detected fortran changes:\n"
          for file in ${changes[@]}; do
            if [[ ${file: -4} != ".f90" && ${file: -4} != ".F90" ]]; then
              continue
            fi
            printf "\t- $file\n"
          done

          echo "changed-files=${changes[@]}" >> $GITHUB_OUTPUT

      - name: Lint changed files
        id: lint-changes
        env:
          changed_files: ${{ steps.get-changed-files.outputs.changed-files }}
        run: |
          if [ -z "$changed_files" ]; then
            echo "No fortran files changed"
            exit 0
          fi

          failed_files=()
          printf "Linting files:\n"
          for file in $changed_files; do

            # If the file is not a Fortran file, skip it.
            if [[ ${file: -4} != ".f90" && ${file: -4} != ".F90" ]]; then
              continue
            fi

            printf "\t- $file"
            score=$(flint score -r flinter_rc.yml $(realpath $file) 2> /dev/null |
                  grep -oP '(?<=\>\|)[^\|\<]+(?=\|\<)')
            printf ": $score\n"

            if (($(echo "$score < 10" | bc -l))); then
                failed_files+=($file)
            fi
          done

          echo "failed-files=${failed_files[@]}" >> $GITHUB_OUTPUT

      - name: Print possible improvements
        if: ${{ steps.lint-changes.outputs.failed-files != '' }}
        env:
          failed_files: ${{ steps.lint-changes.outputs.failed-files }}
        run: |
          printf "Files that can be improved:\n" | tee linter-report.txt
          for file in ${failed_files[@]}; do
            printf "\t- $file\n" | tee -a linter-report.txt
          done

          if [ ${#failed_files[@]} -gt 0 ]; then
            for file in ${failed_files[@]}; do
              report=$(flint lint -r flinter_rc.yml $file)
              if [ -z "$report" ]; then
                report=$(flint stats -r flinter_rc.yml $file)
              fi

              printf "%.s-" {1..80} | tee -a linter-report.txt
              printf "\n" | tee -a linter-report.txt
              printf "Linting improvements for \n\t$file\n\n" | tee -a linter-report.txt
              echo "$report" | tee -a linter-report.txt
            done
          fi

      - name: Save linter report
        uses: actions/upload-artifact@v4
        with:
          name: linter-report
          path: linter-report.txt

  # Create a badge for the flint score
  create-badge-lint:
    name: "Create linting badge"
    runs-on: ubuntu-20.04
    needs:
      - check-scores
      - score-current

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq python3-pip
          pip install anybadge

      - name: Create badge
        env:
            score: ${{ needs.score-current.outputs.score }}
        run: |
            mkdir -p doc/media
            anybadge -l Flint -o --file=doc/media/lint-badge.svg -v $score 9.0=red 9.9=yellow 10=green

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: lint-badge
          path: doc/media/lint-badge.svg