module test_scratch_vector
  use pfunit
  use vector, only : vector_t
  use math, only : cfill
  use scratch_vector, only : scratch_vector_t
  use num_types
  implicit none

contains

  @test
  subroutine test_scratch_vector_init_default()
    type(scratch_vector_t) :: scratch

    scratch = scratch_vector_t(1000)

    @assertEqual(scratch%get_nvectors(), 0)
    @assertEqual(scratch%get_expansion_size(), 10)
    @assertEqual(scratch%get_size(), 10)
    @assertEqual(scratch%get_nvectors_inuse(), 0)


  end subroutine test_scratch_vector_init_default

  @test
  subroutine test_scratch_vector_init()
    type(scratch_vector_t) :: scratch

    scratch = scratch_vector_t(1000, 5, 3)

    @assertEqual(scratch%get_nvectors(), 0)
    @assertEqual(scratch%get_expansion_size(), 3)
    @assertEqual(scratch%get_size(), 5)
    @assertEqual(scratch%get_nvectors_inuse(), 0)

  end subroutine test_scratch_vector_init

  @test
  subroutine test_scratch_vector_request_vector_fresh()
    type(scratch_vector_t) :: scratch
    type(vector_t), pointer :: f1, f2, f3
    integer :: index1, index2, index3

    scratch = scratch_vector_t(1000, 5, 3)

    call scratch%request_vector(f1, index1)
    call scratch%request_vector(f2, index2)
    call scratch%request_vector(f3, index3)
    @assertEqual(index1, 1)
    @assertEqual(index2, 2)
    @assertEqual(scratch%get_inuse(index1), .true.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_nvectors(), 3)
    @assertEqual(scratch%get_nvectors_inuse(), 3)

    ! do something with the vector
    call cfill(f1%x, 1.0_rp, 1000)
    call cfill(f2%x, 2.0_rp, 1000)
    call cfill(f3%x, 3.0_rp, 1000)
    @assertEqual(f1%x(1), 1.0_rp)
    @assertEqual(f2%x(1), 2.0_rp)
    @assertEqual(f3%x(1), 3.0_rp)
  end subroutine test_scratch_vector_request_vector_fresh

  @test
  subroutine test_scratch_vector_relinquish_vector()
    type(scratch_vector_t) :: scratch
    type(vector_t), pointer :: f
    integer :: index

    scratch = scratch_vector_t(1000, 5, 3)

    call scratch%request_vector(f, index)
    call scratch%relinquish_vector(index)
    @assertEqual(scratch%get_inuse(index), .false.)
    @assertEqual(scratch%get_nvectors_inuse(), 0)
    @assertEqual(scratch%get_nvectors(), 1)
  end subroutine test_scratch_vector_relinquish_vector

  @test
  subroutine test_scratch_vector_expand()
    type(scratch_vector_t), target :: scratch
    type(vector_t), pointer :: f1, f2
    integer :: index1, index2

    scratch = scratch_vector_t(1000, 1, 1)

    call scratch%request_vector(f1, index1)
    call cfill(f1%x, 1.0_rp, 1000)
    @assertEqual(f1%x(1), 1.0_rp)

    ! add new vector, trigging expand
    call scratch%request_vector(f2, index2)

    ! try to use the second vector
    call cfill(f2%x, 2.0_rp, 1000)

    ! make sure values in f1 preserved after expansion
    @assertEqual(f1%x(1), 1.0_rp)
    @assertEqual(f2%x(1), 2.0_rp)
    @assertEqual(index1, 1)
    @assertEqual(index2, 2)
    @assertEqual(scratch%get_inuse(index1), .true.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_nvectors(), 2)
    @assertEqual(scratch%get_nvectors_inuse(), 2)
    @assertEqual(scratch%get_size(), 2)
  end subroutine test_scratch_vector_expand

  @test
  subroutine test_scratch_vector_combo()
    type(scratch_vector_t), target :: scratch
    type(vector_t), pointer :: f1, f2, f3
    integer :: index1, index2, index3

    scratch = scratch_vector_t(1000, 2, 2)

    ! add 2 vectors, no expansion
    call scratch%request_vector(f1, index1)
    call scratch%request_vector(f2, index2)
    call cfill(f1%x, 1.0_rp, 1000)
    call cfill(f2%x, 2.0_rp, 1000)

    @assertEqual(index1, 1)
    @assertEqual(index2, 2)
    @assertEqual(scratch%get_inuse(index1), .true.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_nvectors(), 2)
    @assertEqual(scratch%get_nvectors_inuse(), 2)
    @assertEqual(scratch%get_size(), 2)

    ! get rid of one vector
    call scratch%relinquish_vector(index1)
    @assertEqual(scratch%get_inuse(index1), .false.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_nvectors(), 2)
    @assertEqual(scratch%get_nvectors_inuse(), 1)
    @assertEqual(scratch%get_size(), 2)

    ! get a new vector, should get index 1
    call scratch%request_vector(f1, index1)
    call cfill(f1%x, 1.5_rp, 1000)
    @assertEqual(index1, 1)
    @assertEqual(scratch%get_inuse(index1), .true.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_nvectors(), 2)
    @assertEqual(scratch%get_nvectors_inuse(), 2)
    @assertEqual(scratch%get_size(), 2)

    ! check that the vectors have survived
    @assertEqual(f1%x(1), 1.5_rp)
    @assertEqual(f2%x(1), 2.0_rp)

    ! get a another vector, should get index 3 and triger expand
    call scratch%request_vector(f3, index3)
    call cfill(f3%x, 3.0_rp, 1000)
    @assertEqual(index3, 3)
    @assertEqual(scratch%get_inuse(index1), .true.)
    @assertEqual(scratch%get_inuse(index2), .true.)
    @assertEqual(scratch%get_inuse(index3), .true.)
    @assertEqual(scratch%get_nvectors(), 3)
    @assertEqual(scratch%get_nvectors_inuse(), 3)
    @assertEqual(scratch%get_size(), 4)

    ! check that the vectors have survived
    @assertEqual(f1%x(1), 1.5_rp)
    @assertEqual(f2%x(1), 2.0_rp)
    @assertEqual(f3%x(1), 3.0_rp)

  end subroutine test_scratch_vector_combo

  @test
  subroutine test_scratch_vector_array_indices()
    type(scratch_vector_t), target :: scratch
    type(vector_t), pointer :: f1, f2, f3
    integer :: indices(3)

    scratch = scratch_vector_t(1000, 2, 2)

    ! add 2 vectors, no expansion
    call scratch%request_vector(f1, indices(1))
    call scratch%request_vector(f2, indices(2))
    call scratch%request_vector(f3, indices(3))

    @assertEqual(indices(1), 1)
    @assertEqual(indices(2), 2)
    @assertEqual(indices(3), 3)

    call cfill(f1%x, 1.0_rp, 1000)
    call cfill(f2%x, 2.0_rp, 1000)
    call cfill(f3%x, 2.0_rp, 1000)

    ! get rid of the vectors
    call scratch%relinquish_vector(indices)
    @assertEqual(scratch%get_inuse(indices(1)), .false.)
    @assertEqual(scratch%get_inuse(indices(2)), .false.)
    @assertEqual(scratch%get_inuse(indices(3)), .false.)
    @assertEqual(scratch%get_nvectors(), 3)
    @assertEqual(scratch%get_nvectors_inuse(), 0)

    ! get a new vector, should get index 1
    call scratch%request_vector(f1, indices(1))
    call cfill(f1%x, 1.5_rp, 1000)
    @assertEqual(indices(1), 1)
    @assertEqual(scratch%get_inuse(indices(1)), .true.)
    @assertEqual(scratch%get_nvectors(), 3)
    @assertEqual(scratch%get_nvectors_inuse(), 1)

  end subroutine test_scratch_vector_array_indices
end module test_scratch_vector
